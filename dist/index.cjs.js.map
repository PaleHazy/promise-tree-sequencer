{"version":3,"sources":["../src/index.ts","../src/utils.ts","../node_modules/.pnpm/nanoid@4.0.0/node_modules/nanoid/index.browser.js","../src/engine/Actions/BaseAction.ts","../src/engine/Actions/DefaultAction.ts","../src/engine/Tasks/BaseTask.ts","../src/engine/Tasks/DefaultTask.ts","../src/engine/Levels/BaseLevel.ts","../src/engine/Levels/Defaultlevel.ts","../src/engine/Levels/RootLevel.ts","../src/creator/Creator.ts"],"sourcesContent":["import {BaseLevel} from \"./engine/Levels/BaseLevel\";\r\nimport {DefaultLevel} from \"./engine/Levels/Defaultlevel\";\r\nexport {BaseLevel, DefaultLevel};\r\nexport {RootLevel} from \"./engine/Levels/RootLevel\";\r\nexport {convertTimelineToInteractivity} from \"./creator/Creator\";\r\nexport {nanoid} from \"nanoid\";","import { BaseAction } from \"./engine/Actions/BaseAction\";\r\nimport { BaseLevel } from \"./engine/Levels/BaseLevel\";\r\nimport { BaseTask } from \"./engine/Tasks/BaseTask\";\r\nimport { Actions, Levels, Tasks } from \"./interfaces\";\r\n\r\nexport function isRoot(level: BaseLevel) {\r\n  return level.root === level;\r\n}\r\n\r\nfunction logLvl(node: Levels) {\r\n  const lt = `%c[Level]: ${node.name}\\n`\r\n  const lc = `color: ${node.colors.color}; background: ${node.colors.bg};`\r\n  return {lt, lc}\r\n}\r\nfunction logTask(node: Tasks) {\r\n  const tt = `%c[Task]: ${node.name}\\n`\r\n  const tc = `color: ${node.colors.color}; background: ${node.colors.bg};`\r\n  return {tc, tt}\r\n}\r\nfunction logAction(node: Actions) {\r\n  const at = `%c[Action]: ${node.name}\\n`\r\n  const ac = `color: ${node.colors.color}; background: ${node.colors.bg};`\r\n  return {ac, at}\r\n}\r\nexport function log(node: Levels | Tasks | Actions, ...args: any[]) {\r\n  if (node instanceof BaseLevel) {\r\n     const {lc,lt} = logLvl(node);\r\n     console.log(\r\n      ...[lt,lc],\r\n      ...args\r\n    );\r\n  } else if (node instanceof BaseTask) {\r\n    const {lc,lt} = logLvl(node.level);\r\n    const {tc,tt} = logTask(node);\r\n    console.log(lt + tt, lc, tc, ...args);\r\n  } else if (node instanceof BaseAction) {\r\n    const {lc,lt} = logLvl(node.task.level);\r\n    const {tc,tt} = logTask(node.task);\r\n    const {ac,at} = logAction(node);\r\n    console.log(lt + tt + at, lc, tc, ac, ...args);\r\n  }\r\n}\r\n\r\nexport function randomContrastColors() {\r\n  let r = Math.floor(Math.random() * 256 - 1);\r\n  let g = Math.floor(Math.random() * 256 - 1);\r\n  let b = Math.floor(Math.random() * 256 - 1);\r\n  // Calculate brightness of randomized colour\r\n  let brightness = (r * 299 + g * 587 + b * 114) / 1000;\r\n  // Calculate brightness of white and black text\r\n  let lightText = (255 * 299 + 255 * 587 + 255 * 114) / 1000;\r\n  let darkText = (0 * 299 + 0 * 587 + 0 * 114) / 1000;\r\n\r\n  // Apply background colour to current element\r\n  let bg = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\r\n\r\n  // Determine contrast of colour for element text and assign either white or black text depending\r\n  let color = \"\";\r\n  if (Math.abs(brightness - lightText) > Math.abs(brightness - darkText)) {\r\n    color = \"rgb(255, 255, 255)\";\r\n  } else {\r\n    color = \"rgb(0, 0, 0)\";\r\n  }\r\n  return { bg, color };\r\n}\r\n\r\nexport function touchAllLevels(level: Levels, cb: (level: Levels) => void) {\r\n  cb(level);\r\n  for (const child of level.levelBuffer) {\r\n    touchAllLevels(child, cb);\r\n  }\r\n} ","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { BaseTask } from \"../../engine/Tasks/BaseTask\";\r\nimport { ActionDto, ActionStatus, Tasks } from \"../../interfaces\";\r\nimport { randomContrastColors } from \"../../utils\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nexport abstract class BaseAction {\r\n  name: string;\r\n  task: Tasks;\r\n  status: ActionStatus = \"ready\";\r\n  readonly colors = randomContrastColors();\r\n  readonly id = \"a_\" + nanoid()\r\n  constructor(actionDto: ActionDto, task: Tasks) {\r\n    this.name = actionDto.name;\r\n    this.task = task;\r\n  }\r\n  \r\n  abstract run(): Promise<this>;\r\n\r\n  protected updateStatus(status: ActionStatus) {\r\n    this.status = status;\r\n  }\r\n\r\n  protected succesfullyFinished() {\r\n    this.updateStatus(\"finished\"); \r\n  }\r\n\r\n  \r\n}","import { BaseTask } from \"../../engine/Tasks/BaseTask\";\r\nimport { ActionDto } from \"../../interfaces\";\r\nimport { log } from \"../../utils\";\r\nimport { BaseAction } from \"./BaseAction\";\r\n\r\nexport class DefaultAction extends BaseAction {\r\n  constructor(actionDto: ActionDto, task: BaseTask) {\r\n    super(actionDto, task);\r\n  }\r\n\r\n  async run() {\r\n    // log(this,\"DefaultAction run\", this.name);\r\n    this.succesfullyFinished();\r\n    return this;\r\n  }\r\n}","import { DefaultAction } from \"../../engine/Actions/DefaultAction\";\r\nimport { BaseLevel } from \"../../engine/Levels/BaseLevel\";\r\nimport { Actions, FlowModes, TaskDto, Tasks, TaskStatus } from \"../../interfaces\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { log, randomContrastColors } from \"../../utils\";\r\n\r\n// previously action\r\nexport abstract class BaseTask {\r\n  level: BaseLevel;\r\n  name: string;\r\n  actions: Actions[] = [];\r\n  status: TaskStatus = \"ready\";\r\n  actionsFlow: FlowModes;\r\n  actionsPromisesBuffer: Promise<Actions>[] = [];\r\n  taskPromise?: Promise<Tasks>;\r\n  error?: Error | any;\r\n  readonly delay?: number;\r\n  colors = randomContrastColors()\r\n  readonly id = \"t_\" + nanoid()\r\n  taskResolve: (value: Tasks) => void = () => {};\r\n  taskReject: (reason?: any) => void = () => {};\r\n  constructor(taskDto: TaskDto, level: BaseLevel) {\r\n    this.name = taskDto.name;\r\n    this.level = level;\r\n    this.delay = taskDto.delay;\r\n    this.actionsFlow = taskDto.actionsFlow;\r\n    this.loadActions(taskDto);\r\n  }\r\n\r\n  loadActions(taskDto: TaskDto) {\r\n    for (const action of taskDto.actions) {\r\n      this.actions.push(new DefaultAction(action, this));\r\n    }\r\n  }\r\n\r\n  _runActionsAsync(): Promise<Tasks> {\r\n    this.status = \"running\";\r\n    this.taskPromise = new Promise((resolve, reject) => {\r\n      //run custom logic here\r\n      this.actionsPromisesBuffer = this.actions.map((action) => action.run());\r\n      Promise.all(this.actionsPromisesBuffer)\r\n        .then((actionsResults) => {\r\n          // validate actions results\r\n          for (const actionResult of actionsResults) {\r\n            // this lines quits the task if any action fails\r\n            if (actionResult.status === \"failed\") {\r\n              this.taskReject(this);\r\n              return;\r\n            }\r\n          }\r\n          this.status = \"finished\";\r\n          resolve(this);\r\n        })\r\n        .catch((error) => {\r\n          this.error = error;\r\n          this.status = \"failed\";\r\n          reject(this);\r\n        });\r\n    });\r\n    return this.taskPromise;\r\n  }\r\n\r\n  async _runActionsSync(): Promise<Tasks> {\r\n    for (const action of this.actions) {\r\n      await action.run();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  async _runActions(): Promise<Tasks> {\r\n    if (this.actionsFlow === \"async\") {\r\n      return await this._runActionsAsync();\r\n    } else if (this.actionsFlow === \"sync\") {\r\n      return await this._runActionsSync();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  private _delay() {\r\n    return new Promise((resolve) => setTimeout(resolve, this.delay));\r\n  }\r\n\r\n  protected setStarting() {\r\n    this.status = \"running\";\r\n    log(this, \"starting\");\r\n    this.level.root?.events.onTaskStarted?.(this);\r\n  }\r\n\r\n  protected setFinished() {\r\n    this.status = \"finished\";\r\n    log(this, \"finished\");\r\n    this.level.root?.events.onTaskFinished?.(this);\r\n  }\r\n  \r\n  public async start(): Promise<Tasks> {\r\n    this.setStarting();\r\n    return this.flush();\r\n    \r\n  }\r\n\r\n  protected async flush(): Promise<Tasks> {\r\n    if (this.delay) {\r\n      let t = performance.now();\r\n      log(this, \"delaying\");\r\n      this.level.root?.events.onTaskStartDelay?.(this);\r\n      await this._delay();\r\n      log(this, \"delay done\", performance.now() - t, this.delay);\r\n      this.level.root?.events.onTaskFinishDelay?.(this);\r\n    }\r\n    try {\r\n      await this.taskImplemetation();\r\n    } catch(e) {\r\n      this.error = e;\r\n      this.status = \"failed\";\r\n      return this;\r\n    }\r\n    let result = await this._runActions();\r\n    this.setFinished()\r\n    return result\r\n  }\r\n  abstract taskImplemetation(): Promise<void>;\r\n}\r\n","\r\nimport { BaseLevel } from \"../../engine/Levels/BaseLevel\";\r\nimport { TaskDto } from \"../../interfaces\";\r\nimport { log } from \"../../utils\";\r\nimport { BaseTask } from \"./BaseTask\";\r\n\r\nexport class DefaultTask extends BaseTask {\r\n  constructor(taskDto: TaskDto, level: BaseLevel) {\r\n    super(taskDto, level);\r\n  }\r\n\r\n\r\n\r\n  async taskImplemetation() {\r\n    // log(this, \"DefaultTask run\", this.name);\r\n\r\n    // return this;\r\n  }\r\n}","import { DefaultTask } from \"../../engine/Tasks/DefaultTask\";\r\nimport { FlowModes, LevelDto, Levels, LevelStatus, Tasks } from \"../../interfaces\";\r\nimport { isRoot, log, randomContrastColors } from \"../../utils\";\r\nimport { RootLevel } from \"./RootLevel\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { DefaultLevel } from \"../../index\";\r\n\r\n// import { DefaultLevel } from \"./Defaultlevel\";\r\nexport interface Options {\r\n  root?: RootLevel;\r\n  transformer?: any;\r\n  parent?: Levels;\r\n}\r\n\r\nexport abstract class BaseLevel {\r\n  root?: RootLevel; // get set at the end\r\n  parent?: Levels;\r\n  status: LevelStatus = \"ready\";\r\n  levelsFlow!: FlowModes;\r\n  tasksFlow!: FlowModes;\r\n  levelBuffer: Levels[] = [];\r\n  taskBuffer: Tasks[] = [];\r\n  name: string;\r\n  duration: number = 0;\r\n  private _startTime: number = 0;\r\n  readonly delay?: number;\r\n  readonly colors = randomContrastColors();\r\n  readonly id = \"l_\" + nanoid();\r\n\r\n  constructor(dto: LevelDto, options?: Options) {\r\n    this.parent = options?.parent;\r\n    this.levelsFlow = dto.levelsFlow;\r\n    this.buildTree(dto);\r\n    this.name = dto.name;\r\n    this.delay = dto.delay;\r\n    this.loadTasks(dto);\r\n  }\r\n\r\n  setstarting() {\r\n    this.status = \"running\";\r\n\r\n    log(this, \"starting\");\r\n    this._startTime = performance.now();\r\n    this.root?.events.onLevelStarted?.(this);\r\n  }\r\n\r\n  setFinished() {\r\n    this.status = \"finished\";\r\n    this.duration = performance.now() - this._startTime;\r\n    this.root?.events.onLevelFinished?.(this);\r\n  }\r\n\r\n  private loadTasks(dto: LevelDto) {\r\n    this.tasksFlow = dto.tasksFlow;\r\n    for (const taskDto of dto.tasks) {\r\n      this.taskBuffer.push(new DefaultTask(taskDto, this));\r\n    }\r\n  }\r\n  private buildTree(dto: LevelDto) {\r\n    for (const levelDto of dto.levels) {\r\n      this.levelBuffer.push(new DefaultLevel(levelDto, { root: this.root, parent: this }));\r\n    }\r\n  }\r\n\r\n  public start(): Promise<Levels> {\r\n    this.setstarting();\r\n\r\n    return this.flush();\r\n  }\r\n\r\n  protected async flush() {\r\n    if (this.delay) {\r\n      let t = performance.now();\r\n      log(this, \"delaying for\", this.delay);\r\n      this.root?.events.onLevelStartDelay?.(this);\r\n      await new Promise((resolve) => setTimeout(resolve, this.delay));\r\n      log(this, \"delayed for\", performance.now() - t, this.delay);\r\n      this.root?.events.onLevelFinishDelay?.(this);\r\n    }\r\n    log(this, \"flushing\");\r\n\r\n    if (this.levelsFlow === \"async\") {\r\n      return this.flushLevelsAsync();\r\n    } else if (this.levelsFlow === \"sync\") {\r\n      return this.flushLevelsSync();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  private async flushLevelsAsync() {\r\n    if (this.levelBuffer.length) {\r\n      // this.status = \"running\";\r\n      let levelPromisesBuffer = this.levelBuffer.map((level) => {\r\n        return level.start();\r\n      });\r\n\r\n      if (this.status === \"cancelled\") {\r\n        return this;\r\n      }\r\n\r\n      const levelResults = await Promise.all(levelPromisesBuffer);\r\n    }\r\n\r\n    const taskResults = await this.flushTasks();\r\n    if (isRoot(this)) {\r\n      log(this, \"Done with the root level\");\r\n    }\r\n    this.setFinished();\r\n    return this;\r\n  }\r\n  private async flushLevelsSync() {\r\n    if (this.levelBuffer.length) {\r\n      for (const level of this.levelBuffer) {\r\n        await level.start();\r\n      }\r\n\r\n      if (this.status === \"cancelled\") {\r\n        return this;\r\n      }\r\n\r\n      return this;\r\n    }\r\n    const taskResults = await this.flushTasks();\r\n    if (isRoot(this)) {\r\n      log(this, \"Done with the root level\");\r\n    }\r\n\r\n    this.setFinished();\r\n    return this;\r\n  }\r\n  protected async flushTasks() {\r\n    if (this.tasksFlow === \"async\") {\r\n      return this.flushTasksAsync();\r\n    } else if (this.tasksFlow === \"sync\") {\r\n      return this.flushTasksSync();\r\n    }\r\n    return;\r\n  }\r\n  private async flushTasksAsync() {\r\n    // checking if the level is cancelled\r\n    if (this.status === \"cancelled\") {\r\n      return;\r\n    }\r\n    if (this.taskBuffer.length === 0) {\r\n      return;\r\n    }\r\n    const promises = this.taskBuffer.map((task) => {\r\n      if (task.status === \"cancelled\") {\r\n        // careful here\r\n        return Promise.resolve();\r\n      }\r\n      return task.start();\r\n    });\r\n    return await Promise.all(promises);\r\n  }\r\n  private async flushTasksSync() {\r\n    // checking if the level is cancelled\r\n    if (this.status === \"cancelled\") {\r\n      return;\r\n    }\r\n    if (this.taskBuffer.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const results = [];\r\n    for (const task of this.taskBuffer) {\r\n      if (task.status === \"cancelled\") {\r\n        // careful here\r\n        return Promise.resolve();\r\n      }\r\n\r\n      const actions = await task.start();\r\n    }\r\n  }\r\n}\r\n\r\n//have to put it in here cause bundle messes up\r\n\r\n// export class DefaultLevel extends BaseLevel {\r\n\r\n//   constructor(dto: LevelDto, options: Options) {\r\n//     super(dto, options);\r\n//   }\r\n\r\n//   public async start(): Promise<Levels> {\r\n//     return this.flush();\r\n//   }\r\n// }\r\n","import { BaseLevel, Options } from \"../../engine/Levels/BaseLevel\";\r\nimport { LevelDto } from \"../../interfaces\";\r\n\r\nexport class DefaultLevel extends BaseLevel {\r\n\r\n  constructor(dto: LevelDto, options: Options) {\r\n    super(dto, options);\r\n  }\r\n\r\n}\r\n","import { LevelDto, Levels, Tasks } from \"../../interfaces\";\r\nimport { isRoot, log, touchAllLevels } from \"../../utils\";\r\nimport { Options } from \"./BaseLevel\";\r\nimport { DefaultLevel } from \"./Defaultlevel\";\r\n\r\ninterface RootOptions {\r\n  events: {\r\n    onTaskWaitingForInput?: (task: Tasks) => void;\r\n    onLevelStarted?: (level: Levels) => void;\r\n    onLevelStartDelay?: (level: Levels) => void;\r\n    onLevelFinishDelay?: (level: Levels) => void;\r\n    onLevelFinished?: (level: Levels) => void;\r\n    onTaskStarted?: (task: Tasks) => void;\r\n    onTaskStartDelay?: (task: Tasks) => void;\r\n    onTaskFinishDelay?: (task: Tasks) => void;\r\n    onTaskFinished?: (task: Tasks) => void;\r\n  }\r\n  \r\n}\r\n\r\nexport class RootLevel extends DefaultLevel {\r\n  events: RootOptions['events'] = {\r\n    onTaskWaitingForInput: () => {},\r\n    onLevelStarted: () => {},\r\n    onLevelStartDelay: () => {},\r\n    onLevelFinishDelay: () => {},\r\n    onLevelFinished: () => {},\r\n    onTaskStarted: () => {},\r\n    onTaskStartDelay: () => {},\r\n    onTaskFinishDelay: () => {},\r\n    onTaskFinished: () => {},\r\n  };\r\n\r\n  constructor(dto: LevelDto, options: Options & RootOptions) {\r\n    super(dto, options);\r\n    touchAllLevels(this, (level) => {\r\n      level.root = this;\r\n    });\r\n    if (options.events.onTaskWaitingForInput) {\r\n      this.events.onTaskWaitingForInput = options.events.onTaskWaitingForInput;\r\n    }\r\n    if (options.events.onLevelStarted) {\r\n      this.events.onLevelStarted = options.events.onLevelStarted;\r\n    }\r\n    if (options.events.onLevelStartDelay) {\r\n      this.events.onLevelStartDelay = options.events.onLevelStartDelay;\r\n    }\r\n    if (options.events.onLevelFinishDelay) {\r\n      this.events.onLevelFinishDelay = options.events.onLevelFinishDelay;\r\n    }\r\n\r\n    if (options.events.onLevelFinished) {\r\n      this.events.onLevelFinished = options.events.onLevelFinished;\r\n    }\r\n    if (options.events.onTaskStarted) {\r\n      this.events.onTaskStarted = options.events.onTaskStarted;\r\n    }\r\n    if (options.events.onTaskStartDelay) {\r\n      this.events.onTaskStartDelay = options.events.onTaskStartDelay;\r\n    }\r\n    if (options.events.onTaskFinishDelay) {\r\n      this.events.onTaskFinishDelay = options.events.onTaskFinishDelay;\r\n    }\r\n    if (options.events.onTaskFinished) {\r\n      this.events.onTaskFinished = options.events.onTaskFinished;\r\n    }\r\n  }\r\n\r\n  updateEvents(events: RootOptions) {\r\n    this.events = {\r\n      ...this.events,\r\n      ...events,\r\n    };\r\n  }\r\n}\r\n","import { ActionDto, FlowModes, LevelDto, TaskDto } from \"../interfaces\";\r\nexport class LevelDtoEditor {\r\n  levels: LevelDtoEditor[] = [];\r\n  tasks: TaskDtoEditor[] = [];\r\n  levelsFlow: FlowModes = \"async\";\r\n  tasksFlow: FlowModes = \"async\";\r\n  name = \"empty_level\";\r\n  delay?: number = 0\r\n\r\n  constructor() {}\r\n\r\n  appendLevel(level: LevelDtoEditor) {\r\n    return this.levels.push(level);\r\n  }\r\n\r\n  appendTask(task: TaskDtoEditor) {\r\n    return this.tasks.push(task);\r\n  }\r\n  print(): LevelDto {\r\n    const output = {\r\n      name: this.name,\r\n      levelsFlow: this.levelsFlow,\r\n      tasksFlow: this.tasksFlow,\r\n      delay: this.delay,\r\n      levels: this.levels.map((level) => level.print()),\r\n      tasks: this.tasks.map((task) => task.print()),\r\n    };\r\n    return output;\r\n  }\r\n}\r\nexport class ActionDtoEditor {\r\n  name = \"empty_action\";\r\n  constructor() {}\r\n  print(): ActionDto {\r\n    const output = {\r\n      name: this.name,\r\n    };\r\n    return output;\r\n  }\r\n}\r\nexport class TaskDtoEditor {\r\n  name = \"empty_task\";\r\n  actions: ActionDtoEditor[] = [];\r\n  delay: number = 0\r\n  constructor() {}\r\n\r\n  appendAction(action: ActionDtoEditor) {\r\n    return this.actions.push(action);\r\n  }\r\n  print(): TaskDto {\r\n    const output: TaskDto = {\r\n      name: this.name,\r\n      actionsFlow: \"async\",\r\n      type: \"default\",\r\n      delay: this.delay,\r\n      actions: this.actions.map((action) => action.print()),\r\n    };\r\n    return output;\r\n  }\r\n}\r\nconst DEFAULT_LEVEL: LevelDto = {\r\n  levels: [],\r\n  tasks: [],\r\n  levelsFlow: \"async\",\r\n  tasksFlow: \"async\",\r\n  name: \"empty_level\",\r\n  delay: 0,\r\n};\r\nexport class Creator {\r\n  structure: LevelDto = DEFAULT_LEVEL;\r\n  constructor() {\r\n    console.log(\"creator\");\r\n  }\r\n  createLevel(): LevelDtoEditor {\r\n    return new LevelDtoEditor();\r\n  }\r\n  createLevelEditorFromDto(dto: LevelDto): LevelDtoEditor {\r\n    return new LevelDtoEditor();\r\n  }\r\n\r\n  createTask() {\r\n    return new TaskDtoEditor();\r\n  }\r\n\r\n}\r\n\r\nexport function convertTimelineToInteractivity(timeline: any) {\r\n  const creator = new Creator();\r\n  const root = creator.createLevel();\r\n  root.name = \"root\";\r\n  const timelineRootLevel = creator.createLevel();\r\n  root.appendLevel(timelineRootLevel);\r\n  timelineRootLevel.name = \"timeline_root\";\r\n  timelineRootLevel.levelsFlow = \"async\";\r\n  timelineRootLevel.tasksFlow = \"async\";\r\n\r\n  timeline.animatedObjects.forEach((animatedObject: any) => {\r\n    const animatedObjectLevel = creator.createLevel();\r\n    animatedObjectLevel.name = \"animated_object\";\r\n    animatedObjectLevel.levelsFlow = \"sync\";\r\n    animatedObjectLevel.tasksFlow = \"async\";\r\n\r\n    const id = animatedObject.id;\r\n    const start = animatedObject.start;\r\n    const end = animatedObject.end;\r\n\r\n    \r\n    if(typeof start !== \"number\") {\r\n      throw new Error(\"start is not a number\");\r\n    }\r\n    \r\n    if(start > 0) {\r\n      const startTask = creator.createTask();\r\n      startTask.name = \"start_delay\";\r\n      startTask.delay = start * 1000;\r\n      animatedObjectLevel.appendTask(startTask);\r\n    }\r\n\r\n    if(end === null) {\r\n      // do nothing\r\n    } else {\r\n      if(typeof end !== \"number\") {\r\n        throw new Error(\"end is not a number\");\r\n      }\r\n      if(end > 0) {\r\n        const endTask = creator.createTask();\r\n        endTask.name = \"end_delay\";\r\n        if(typeof start !== \"number\") {\r\n          endTask.delay = end * 1000;\r\n        } else {\r\n          endTask.delay = (end - start) * 1000;\r\n        }\r\n\r\n        animatedObjectLevel.appendTask(endTask);\r\n      }\r\n    }\r\n    \r\n\r\n    timelineRootLevel.appendLevel(animatedObjectLevel);\r\n  });\r\n  return root.print();\r\n}\r\n"],"mappings":"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","names":[]}