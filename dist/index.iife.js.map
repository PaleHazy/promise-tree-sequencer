{"version":3,"sources":["../src/index.ts","../src/utils.ts","../node_modules/.pnpm/nanoid@4.0.0/node_modules/nanoid/index.browser.js","../src/engine/Actions/BaseAction.ts","../src/engine/Actions/DefaultAction.ts","../src/engine/Tasks/BaseTask.ts","../src/engine/Tasks/DefaultTask.ts","../src/engine/Levels/BaseLevel.ts","../src/engine/Levels/Defaultlevel.ts","../src/engine/Levels/RootLevel.ts","../src/creator/Creator.ts"],"sourcesContent":["import {BaseLevel} from \"./engine/Levels/BaseLevel\";\r\nimport {DefaultLevel} from \"./engine/Levels/Defaultlevel\";\r\nexport {BaseLevel, DefaultLevel};\r\nexport {RootLevel} from \"./engine/Levels/RootLevel\";\r\nexport {convertTimelineToInteractivity} from \"./creator/Creator\";\r\nexport {nanoid} from \"nanoid\";","import { BaseAction } from \"./engine/Actions/BaseAction\";\r\nimport { BaseLevel } from \"./engine/Levels/BaseLevel\";\r\nimport { BaseTask } from \"./engine/Tasks/BaseTask\";\r\nimport { Actions, Levels, Tasks } from \"./interfaces\";\r\n\r\nexport function isRoot(level: BaseLevel) {\r\n  return level.root === level;\r\n}\r\n\r\nfunction logLvl(node: Levels) {\r\n  const lt = `%c[Level]: ${node.name}\\n`\r\n  const lc = `color: ${node.colors.color}; background: ${node.colors.bg};`\r\n  return {lt, lc}\r\n}\r\nfunction logTask(node: Tasks) {\r\n  const tt = `%c[Task]: ${node.name}\\n`\r\n  const tc = `color: ${node.colors.color}; background: ${node.colors.bg};`\r\n  return {tc, tt}\r\n}\r\nfunction logAction(node: Actions) {\r\n  const at = `%c[Action]: ${node.name}\\n`\r\n  const ac = `color: ${node.colors.color}; background: ${node.colors.bg};`\r\n  return {ac, at}\r\n}\r\nexport function log(node: Levels | Tasks | Actions, ...args: any[]) {\r\n  if (node instanceof BaseLevel) {\r\n     const {lc,lt} = logLvl(node);\r\n     console.log(\r\n      ...[lt,lc],\r\n      ...args\r\n    );\r\n  } else if (node instanceof BaseTask) {\r\n    const {lc,lt} = logLvl(node.level);\r\n    const {tc,tt} = logTask(node);\r\n    console.log(lt + tt, lc, tc, ...args);\r\n  } else if (node instanceof BaseAction) {\r\n    const {lc,lt} = logLvl(node.task.level);\r\n    const {tc,tt} = logTask(node.task);\r\n    const {ac,at} = logAction(node);\r\n    console.log(lt + tt + at, lc, tc, ac, ...args);\r\n  }\r\n}\r\n\r\nexport function randomContrastColors() {\r\n  let r = Math.floor(Math.random() * 256 - 1);\r\n  let g = Math.floor(Math.random() * 256 - 1);\r\n  let b = Math.floor(Math.random() * 256 - 1);\r\n  // Calculate brightness of randomized colour\r\n  let brightness = (r * 299 + g * 587 + b * 114) / 1000;\r\n  // Calculate brightness of white and black text\r\n  let lightText = (255 * 299 + 255 * 587 + 255 * 114) / 1000;\r\n  let darkText = (0 * 299 + 0 * 587 + 0 * 114) / 1000;\r\n\r\n  // Apply background colour to current element\r\n  let bg = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\r\n\r\n  // Determine contrast of colour for element text and assign either white or black text depending\r\n  let color = \"\";\r\n  if (Math.abs(brightness - lightText) > Math.abs(brightness - darkText)) {\r\n    color = \"rgb(255, 255, 255)\";\r\n  } else {\r\n    color = \"rgb(0, 0, 0)\";\r\n  }\r\n  return { bg, color };\r\n}\r\n\r\nexport function touchAllLevels(level: Levels, cb: (level: Levels) => void) {\r\n  cb(level);\r\n  for (const child of level.levelBuffer) {\r\n    touchAllLevels(child, cb);\r\n  }\r\n} ","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { BaseTask } from \"../../engine/Tasks/BaseTask\";\r\nimport { ActionDto, ActionStatus, Tasks } from \"../../interfaces\";\r\nimport { randomContrastColors } from \"../../utils\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nexport abstract class BaseAction {\r\n  name: string;\r\n  task: Tasks;\r\n  status: ActionStatus = \"ready\";\r\n  readonly colors = randomContrastColors();\r\n  readonly id = \"a_\" + nanoid()\r\n  constructor(actionDto: ActionDto, task: Tasks) {\r\n    this.name = actionDto.name;\r\n    this.task = task;\r\n  }\r\n  \r\n  abstract run(): Promise<this>;\r\n\r\n  protected updateStatus(status: ActionStatus) {\r\n    this.status = status;\r\n  }\r\n\r\n  protected succesfullyFinished() {\r\n    this.updateStatus(\"finished\"); \r\n  }\r\n\r\n  \r\n}","import { BaseTask } from \"../../engine/Tasks/BaseTask\";\r\nimport { ActionDto } from \"../../interfaces\";\r\nimport { log } from \"../../utils\";\r\nimport { BaseAction } from \"./BaseAction\";\r\n\r\nexport class DefaultAction extends BaseAction {\r\n  constructor(actionDto: ActionDto, task: BaseTask) {\r\n    super(actionDto, task);\r\n  }\r\n\r\n  async run() {\r\n    // log(this,\"DefaultAction run\", this.name);\r\n    this.succesfullyFinished();\r\n    return this;\r\n  }\r\n}","import { DefaultAction } from \"../../engine/Actions/DefaultAction\";\r\nimport { BaseLevel } from \"../../engine/Levels/BaseLevel\";\r\nimport { Actions, FlowModes, TaskDto, Tasks, TaskStatus } from \"../../interfaces\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { log, randomContrastColors } from \"../../utils\";\r\n\r\n// previously action\r\nexport abstract class BaseTask {\r\n  level: BaseLevel;\r\n  name: string;\r\n  actions: Actions[] = [];\r\n  status: TaskStatus = \"ready\";\r\n  actionsFlow: FlowModes;\r\n  actionsPromisesBuffer: Promise<Actions>[] = [];\r\n  taskPromise?: Promise<Tasks>;\r\n  error?: Error | any;\r\n  readonly delay?: number;\r\n  colors = randomContrastColors()\r\n  readonly id = \"t_\" + nanoid()\r\n  taskResolve: (value: Tasks) => void = () => {};\r\n  taskReject: (reason?: any) => void = () => {};\r\n  constructor(taskDto: TaskDto, level: BaseLevel) {\r\n    this.name = taskDto.name;\r\n    this.level = level;\r\n    this.delay = taskDto.delay;\r\n    this.actionsFlow = taskDto.actionsFlow;\r\n    this.loadActions(taskDto);\r\n  }\r\n\r\n  loadActions(taskDto: TaskDto) {\r\n    for (const action of taskDto.actions) {\r\n      this.actions.push(new DefaultAction(action, this));\r\n    }\r\n  }\r\n\r\n  _runActionsAsync(): Promise<Tasks> {\r\n    this.status = \"running\";\r\n    this.taskPromise = new Promise((resolve, reject) => {\r\n      //run custom logic here\r\n      this.actionsPromisesBuffer = this.actions.map((action) => action.run());\r\n      Promise.all(this.actionsPromisesBuffer)\r\n        .then((actionsResults) => {\r\n          // validate actions results\r\n          for (const actionResult of actionsResults) {\r\n            // this lines quits the task if any action fails\r\n            if (actionResult.status === \"failed\") {\r\n              this.taskReject(this);\r\n              return;\r\n            }\r\n          }\r\n          this.status = \"finished\";\r\n          resolve(this);\r\n        })\r\n        .catch((error) => {\r\n          this.error = error;\r\n          this.status = \"failed\";\r\n          reject(this);\r\n        });\r\n    });\r\n    return this.taskPromise;\r\n  }\r\n\r\n  async _runActionsSync(): Promise<Tasks> {\r\n    for (const action of this.actions) {\r\n      await action.run();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  async _runActions(): Promise<Tasks> {\r\n    if (this.actionsFlow === \"async\") {\r\n      return await this._runActionsAsync();\r\n    } else if (this.actionsFlow === \"sync\") {\r\n      return await this._runActionsSync();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  private _delay() {\r\n    return new Promise((resolve) => setTimeout(resolve, this.delay));\r\n  }\r\n\r\n  protected setStarting() {\r\n    this.status = \"running\";\r\n    log(this, \"starting\");\r\n    this.level.root?.events.onTaskStarted?.(this);\r\n  }\r\n\r\n  protected setFinished() {\r\n    this.status = \"finished\";\r\n    log(this, \"finished\");\r\n    this.level.root?.events.onTaskFinished?.(this);\r\n  }\r\n  \r\n  public async start(): Promise<Tasks> {\r\n    this.setStarting();\r\n    return this.flush();\r\n    \r\n  }\r\n\r\n  protected async flush(): Promise<Tasks> {\r\n    if (this.delay) {\r\n      let t = performance.now();\r\n      log(this, \"delaying\");\r\n      this.level.root?.events.onTaskStartDelay?.(this);\r\n      await this._delay();\r\n      log(this, \"delay done\", performance.now() - t, this.delay);\r\n      this.level.root?.events.onTaskFinishDelay?.(this);\r\n    }\r\n    try {\r\n      await this.taskImplemetation();\r\n    } catch(e) {\r\n      this.error = e;\r\n      this.status = \"failed\";\r\n      return this;\r\n    }\r\n    let result = await this._runActions();\r\n    this.setFinished()\r\n    return result\r\n  }\r\n  abstract taskImplemetation(): Promise<void>;\r\n}\r\n","\r\nimport { BaseLevel } from \"../../engine/Levels/BaseLevel\";\r\nimport { TaskDto } from \"../../interfaces\";\r\nimport { log } from \"../../utils\";\r\nimport { BaseTask } from \"./BaseTask\";\r\n\r\nexport class DefaultTask extends BaseTask {\r\n  constructor(taskDto: TaskDto, level: BaseLevel) {\r\n    super(taskDto, level);\r\n  }\r\n\r\n\r\n\r\n  async taskImplemetation() {\r\n    // log(this, \"DefaultTask run\", this.name);\r\n\r\n    // return this;\r\n  }\r\n}","import { DefaultTask } from \"../../engine/Tasks/DefaultTask\";\r\nimport { FlowModes, LevelDto, Levels, LevelStatus, Tasks } from \"../../interfaces\";\r\nimport { isRoot, log, randomContrastColors } from \"../../utils\";\r\nimport { RootLevel } from \"./RootLevel\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { DefaultLevel } from \"../../index\";\r\n\r\n// import { DefaultLevel } from \"./Defaultlevel\";\r\nexport interface Options {\r\n  root?: RootLevel;\r\n  transformer?: any;\r\n  parent?: Levels;\r\n}\r\n\r\nexport abstract class BaseLevel {\r\n  root?: RootLevel; // get set at the end\r\n  parent?: Levels;\r\n  status: LevelStatus = \"ready\";\r\n  levelsFlow!: FlowModes;\r\n  tasksFlow!: FlowModes;\r\n  levelBuffer: Levels[] = [];\r\n  taskBuffer: Tasks[] = [];\r\n  name: string;\r\n  duration: number = 0;\r\n  private _startTime: number = 0;\r\n  readonly delay?: number;\r\n  readonly colors = randomContrastColors();\r\n  readonly id = \"l_\" + nanoid();\r\n\r\n  constructor(dto: LevelDto, options?: Options) {\r\n    this.parent = options?.parent;\r\n    this.levelsFlow = dto.levelsFlow;\r\n    this.buildTree(dto);\r\n    this.name = dto.name;\r\n    this.delay = dto.delay;\r\n    this.loadTasks(dto);\r\n  }\r\n\r\n  setstarting() {\r\n    this.status = \"running\";\r\n\r\n    log(this, \"starting\");\r\n    this._startTime = performance.now();\r\n    this.root?.events.onLevelStarted?.(this);\r\n  }\r\n\r\n  setFinished() {\r\n    this.status = \"finished\";\r\n    this.duration = performance.now() - this._startTime;\r\n    this.root?.events.onLevelFinished?.(this);\r\n  }\r\n\r\n  private loadTasks(dto: LevelDto) {\r\n    this.tasksFlow = dto.tasksFlow;\r\n    for (const taskDto of dto.tasks) {\r\n      this.taskBuffer.push(new DefaultTask(taskDto, this));\r\n    }\r\n  }\r\n  private buildTree(dto: LevelDto) {\r\n    for (const levelDto of dto.levels) {\r\n      this.levelBuffer.push(new DefaultLevel(levelDto, { root: this.root, parent: this }));\r\n    }\r\n  }\r\n\r\n  public start(): Promise<Levels> {\r\n    this.setstarting();\r\n\r\n    return this.flush();\r\n  }\r\n\r\n  protected async flush() {\r\n    if (this.delay) {\r\n      let t = performance.now();\r\n      log(this, \"delaying for\", this.delay);\r\n      this.root?.events.onLevelStartDelay?.(this);\r\n      await new Promise((resolve) => setTimeout(resolve, this.delay));\r\n      log(this, \"delayed for\", performance.now() - t, this.delay);\r\n      this.root?.events.onLevelFinishDelay?.(this);\r\n    }\r\n    log(this, \"flushing\");\r\n\r\n    if (this.levelsFlow === \"async\") {\r\n      return this.flushLevelsAsync();\r\n    } else if (this.levelsFlow === \"sync\") {\r\n      return this.flushLevelsSync();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  private async flushLevelsAsync() {\r\n    if (this.levelBuffer.length) {\r\n      // this.status = \"running\";\r\n      let levelPromisesBuffer = this.levelBuffer.map((level) => {\r\n        return level.start();\r\n      });\r\n\r\n      if (this.status === \"cancelled\") {\r\n        return this;\r\n      }\r\n\r\n      const levelResults = await Promise.all(levelPromisesBuffer);\r\n    }\r\n\r\n    const taskResults = await this.flushTasks();\r\n    if (isRoot(this)) {\r\n      log(this, \"Done with the root level\");\r\n    }\r\n    this.setFinished();\r\n    return this;\r\n  }\r\n  private async flushLevelsSync() {\r\n    if (this.levelBuffer.length) {\r\n      for (const level of this.levelBuffer) {\r\n        await level.start();\r\n      }\r\n\r\n      if (this.status === \"cancelled\") {\r\n        return this;\r\n      }\r\n\r\n      return this;\r\n    }\r\n    const taskResults = await this.flushTasks();\r\n    if (isRoot(this)) {\r\n      log(this, \"Done with the root level\");\r\n    }\r\n\r\n    this.setFinished();\r\n    return this;\r\n  }\r\n  protected async flushTasks() {\r\n    if (this.tasksFlow === \"async\") {\r\n      return this.flushTasksAsync();\r\n    } else if (this.tasksFlow === \"sync\") {\r\n      return this.flushTasksSync();\r\n    }\r\n    return;\r\n  }\r\n  private async flushTasksAsync() {\r\n    // checking if the level is cancelled\r\n    if (this.status === \"cancelled\") {\r\n      return;\r\n    }\r\n    if (this.taskBuffer.length === 0) {\r\n      return;\r\n    }\r\n    const promises = this.taskBuffer.map((task) => {\r\n      if (task.status === \"cancelled\") {\r\n        // careful here\r\n        return Promise.resolve();\r\n      }\r\n      return task.start();\r\n    });\r\n    return await Promise.all(promises);\r\n  }\r\n  private async flushTasksSync() {\r\n    // checking if the level is cancelled\r\n    if (this.status === \"cancelled\") {\r\n      return;\r\n    }\r\n    if (this.taskBuffer.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const results = [];\r\n    for (const task of this.taskBuffer) {\r\n      if (task.status === \"cancelled\") {\r\n        // careful here\r\n        return Promise.resolve();\r\n      }\r\n\r\n      const actions = await task.start();\r\n    }\r\n  }\r\n}\r\n\r\n//have to put it in here cause bundle messes up\r\n\r\n// export class DefaultLevel extends BaseLevel {\r\n\r\n//   constructor(dto: LevelDto, options: Options) {\r\n//     super(dto, options);\r\n//   }\r\n\r\n//   public async start(): Promise<Levels> {\r\n//     return this.flush();\r\n//   }\r\n// }\r\n","import { BaseLevel, Options } from \"../../engine/Levels/BaseLevel\";\r\nimport { LevelDto } from \"../../interfaces\";\r\n\r\nexport class DefaultLevel extends BaseLevel {\r\n\r\n  constructor(dto: LevelDto, options: Options) {\r\n    super(dto, options);\r\n  }\r\n\r\n}\r\n","import { LevelDto, Levels, Tasks } from \"../../interfaces\";\r\nimport { isRoot, log, touchAllLevels } from \"../../utils\";\r\nimport { Options } from \"./BaseLevel\";\r\nimport { DefaultLevel } from \"./Defaultlevel\";\r\n\r\ninterface RootOptions {\r\n  events: {\r\n    onTaskWaitingForInput?: (task: Tasks) => void;\r\n    onLevelStarted?: (level: Levels) => void;\r\n    onLevelStartDelay?: (level: Levels) => void;\r\n    onLevelFinishDelay?: (level: Levels) => void;\r\n    onLevelFinished?: (level: Levels) => void;\r\n    onTaskStarted?: (task: Tasks) => void;\r\n    onTaskStartDelay?: (task: Tasks) => void;\r\n    onTaskFinishDelay?: (task: Tasks) => void;\r\n    onTaskFinished?: (task: Tasks) => void;\r\n  }\r\n  \r\n}\r\n\r\nexport class RootLevel extends DefaultLevel {\r\n  events: RootOptions['events'] = {\r\n    onTaskWaitingForInput: () => {},\r\n    onLevelStarted: () => {},\r\n    onLevelStartDelay: () => {},\r\n    onLevelFinishDelay: () => {},\r\n    onLevelFinished: () => {},\r\n    onTaskStarted: () => {},\r\n    onTaskStartDelay: () => {},\r\n    onTaskFinishDelay: () => {},\r\n    onTaskFinished: () => {},\r\n  };\r\n\r\n  constructor(dto: LevelDto, options: Options & RootOptions) {\r\n    super(dto, options);\r\n    touchAllLevels(this, (level) => {\r\n      level.root = this;\r\n    });\r\n    if (options.events.onTaskWaitingForInput) {\r\n      this.events.onTaskWaitingForInput = options.events.onTaskWaitingForInput;\r\n    }\r\n    if (options.events.onLevelStarted) {\r\n      this.events.onLevelStarted = options.events.onLevelStarted;\r\n    }\r\n    if (options.events.onLevelStartDelay) {\r\n      this.events.onLevelStartDelay = options.events.onLevelStartDelay;\r\n    }\r\n    if (options.events.onLevelFinishDelay) {\r\n      this.events.onLevelFinishDelay = options.events.onLevelFinishDelay;\r\n    }\r\n\r\n    if (options.events.onLevelFinished) {\r\n      this.events.onLevelFinished = options.events.onLevelFinished;\r\n    }\r\n    if (options.events.onTaskStarted) {\r\n      this.events.onTaskStarted = options.events.onTaskStarted;\r\n    }\r\n    if (options.events.onTaskStartDelay) {\r\n      this.events.onTaskStartDelay = options.events.onTaskStartDelay;\r\n    }\r\n    if (options.events.onTaskFinishDelay) {\r\n      this.events.onTaskFinishDelay = options.events.onTaskFinishDelay;\r\n    }\r\n    if (options.events.onTaskFinished) {\r\n      this.events.onTaskFinished = options.events.onTaskFinished;\r\n    }\r\n  }\r\n\r\n  updateEvents(events: RootOptions) {\r\n    this.events = {\r\n      ...this.events,\r\n      ...events,\r\n    };\r\n  }\r\n}\r\n","import { ActionDto, FlowModes, LevelDto, TaskDto } from \"../interfaces\";\r\nexport class LevelDtoEditor {\r\n  levels: LevelDtoEditor[] = [];\r\n  tasks: TaskDtoEditor[] = [];\r\n  levelsFlow: FlowModes = \"async\";\r\n  tasksFlow: FlowModes = \"async\";\r\n  name = \"empty_level\";\r\n  delay?: number = 0\r\n\r\n  constructor() {}\r\n\r\n  appendLevel(level: LevelDtoEditor) {\r\n    return this.levels.push(level);\r\n  }\r\n\r\n  appendTask(task: TaskDtoEditor) {\r\n    return this.tasks.push(task);\r\n  }\r\n  print(): LevelDto {\r\n    const output = {\r\n      name: this.name,\r\n      levelsFlow: this.levelsFlow,\r\n      tasksFlow: this.tasksFlow,\r\n      delay: this.delay,\r\n      levels: this.levels.map((level) => level.print()),\r\n      tasks: this.tasks.map((task) => task.print()),\r\n    };\r\n    return output;\r\n  }\r\n}\r\nexport class ActionDtoEditor {\r\n  name = \"empty_action\";\r\n  constructor() {}\r\n  print(): ActionDto {\r\n    const output = {\r\n      name: this.name,\r\n    };\r\n    return output;\r\n  }\r\n}\r\nexport class TaskDtoEditor {\r\n  name = \"empty_task\";\r\n  actions: ActionDtoEditor[] = [];\r\n  delay: number = 0\r\n  constructor() {}\r\n\r\n  appendAction(action: ActionDtoEditor) {\r\n    return this.actions.push(action);\r\n  }\r\n  print(): TaskDto {\r\n    const output: TaskDto = {\r\n      name: this.name,\r\n      actionsFlow: \"async\",\r\n      type: \"default\",\r\n      delay: this.delay,\r\n      actions: this.actions.map((action) => action.print()),\r\n    };\r\n    return output;\r\n  }\r\n}\r\nconst DEFAULT_LEVEL: LevelDto = {\r\n  levels: [],\r\n  tasks: [],\r\n  levelsFlow: \"async\",\r\n  tasksFlow: \"async\",\r\n  name: \"empty_level\",\r\n  delay: 0,\r\n};\r\nexport class Creator {\r\n  structure: LevelDto = DEFAULT_LEVEL;\r\n  constructor() {\r\n    console.log(\"creator\");\r\n  }\r\n  createLevel(): LevelDtoEditor {\r\n    return new LevelDtoEditor();\r\n  }\r\n  createLevelEditorFromDto(dto: LevelDto): LevelDtoEditor {\r\n    return new LevelDtoEditor();\r\n  }\r\n\r\n  createTask() {\r\n    return new TaskDtoEditor();\r\n  }\r\n\r\n}\r\n\r\nexport function convertTimelineToInteractivity(timeline: any) {\r\n  const creator = new Creator();\r\n  const root = creator.createLevel();\r\n  root.name = \"root\";\r\n  const timelineRootLevel = creator.createLevel();\r\n  root.appendLevel(timelineRootLevel);\r\n  timelineRootLevel.name = \"timeline_root\";\r\n  timelineRootLevel.levelsFlow = \"async\";\r\n  timelineRootLevel.tasksFlow = \"async\";\r\n\r\n  timeline.animatedObjects.forEach((animatedObject: any) => {\r\n    const animatedObjectLevel = creator.createLevel();\r\n    animatedObjectLevel.name = \"animated_object\";\r\n    animatedObjectLevel.levelsFlow = \"sync\";\r\n    animatedObjectLevel.tasksFlow = \"async\";\r\n\r\n    const id = animatedObject.id;\r\n    const start = animatedObject.start;\r\n    const end = animatedObject.end;\r\n\r\n    \r\n    if(typeof start !== \"number\") {\r\n      throw new Error(\"start is not a number\");\r\n    }\r\n    \r\n    if(start > 0) {\r\n      const startTask = creator.createTask();\r\n      startTask.name = \"start_delay\";\r\n      startTask.delay = start * 1000;\r\n      animatedObjectLevel.appendTask(startTask);\r\n    }\r\n\r\n    if(end === null) {\r\n      // do nothing\r\n    } else {\r\n      if(typeof end !== \"number\") {\r\n        throw new Error(\"end is not a number\");\r\n      }\r\n      if(end > 0) {\r\n        const endTask = creator.createTask();\r\n        endTask.name = \"end_delay\";\r\n        if(typeof start !== \"number\") {\r\n          endTask.delay = end * 1000;\r\n        } else {\r\n          endTask.delay = (end - start) * 1000;\r\n        }\r\n\r\n        animatedObjectLevel.appendTask(endTask);\r\n      }\r\n    }\r\n    \r\n\r\n    timelineRootLevel.appendLevel(animatedObjectLevel);\r\n  });\r\n  return root.print();\r\n}\r\n"],"mappings":"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","names":[]}